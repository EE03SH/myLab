This project is just used to emulate this scenario:
 _   _       _
| \ | | ___ | |_ ___  ___
|  \| |/ _ \| __/ _ \/ __|
| |\  | (_) | ||  __/\__ \
|_| \_|\___/ \__\___||___/
1. node.js communicate with python process
2. the unix domain socket is used here
3. the msg is bidirectional
4. use mongodbto trigger



 _____ _                  ____ _                _
|  ___| | _____      __  / ___| |__   __ _ _ __| |_
| |_  | |/ _ \ \ /\ / / | |   | '_ \ / _` | '__| __|
|  _| | | (_) \ V  V /  | |___| | | | (_| | |  | |_
|_|   |_|\___/ \_/\_/    \____|_| |_|\__,_|_|   \__|

1.1.Telnet Pane: click 'connect'
1.2.Telnet Pane backend: start websockify

msg format(JSON) :  dst/action/actionArgs
each thread will use one seperate socket to communicate with node.js
singleton check

2.1 LCD control pane: click pane, send msg: 'none/connect/ip'
2.2 python daemon: receive msg and create thread and telnet
2.3 LCD control pane: click keypad and backend send msg to python daemon 'ip/key/keyName' 通过额外的socket
2.4 python daemon: parse ip and do key press
2.5 LCD control pane: close pane, stop telnet session(add session check and timeout)